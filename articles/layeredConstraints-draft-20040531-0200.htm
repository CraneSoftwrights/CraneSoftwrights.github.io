<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>Layering constraint expressions on XML documents</title><meta name="generator" content="DocBook XSL Stylesheets V1.60.1"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="article" lang="en"><div class="titlepage"><div><div><h2 class="title"><a name="d0e1"></a>Layering constraint expressions on XML documents</h2></div><div><p class="copyright">Copyright &copy; 2004 Crane Softwrights Ltd.</p></div><div><p class="pubdate">$Date: 2004/05/31 02:08:52 $(UTC)</p></div></div><div></div><hr></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt>1. <a href="#d0e15">
Introduction</a></dt><dt>2. <a href="#d0e24">
Syntax and semantics</a></dt><dd><dl><dt>2.1. <a href="#d0e43">
The XML syntax</a></dt><dt>2.2. <a href="#d0e55">
The role of XML namespaces</a></dt><dt>2.3. <a href="#d0e64">
An XML vocabulary</a></dt><dt>2.4. <a href="#d0e75">
Roles for schema expressions for XML documents</a></dt><dt>2.5. <a href="#d0e86">
Semantic XML processing applications</a></dt></dl></dd><dt>3. <a href="#d0e101">
The changing context and life cycle of an XML document</a></dt><dt>4. <a href="#d0e112">
W3C Schema expressions</a></dt><dt>5. <a href="#d0e142">
ISO/IEC 19757 Document Schema Definition Languages (DSDL)</a></dt><dt>6. <a href="#d0e183">
Constraining subsets of the Universal Business Language (UBL)</a></dt><dt>7. <a href="#d0e220">
Conclusion</a></dt><dt><a href="#d0e225">
Bibliography</a></dt></dl></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e15"></a>1.&nbsp;
Introduction</h2></div></div><div></div></div><p>There are a number of differing opinions regarding the role of schema expressions when working with XML documents.  This discussion paper puts forward the author's opinion regarding how multiple constraint expressions for the same document type vocabulary can be, and indeed should be, contemplated in the life cycle of an XML document.  This discussion also overviews commonly-held misbeliefs (as perceived by the author) regarding the role of constraint expressions for XML documents.</p><p>
The discussion builds on basic premises and definitions of terminology so the reader understands the bases for the conclusions.</p><p>
The opinions expressed here are those held by the author and the author is not attempting to misrepresent the opinions held by other organizations about their own work.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e24"></a>2.&nbsp;
Syntax and semantics</h2></div></div><div></div></div><p>
Syntax is the harmonious arrangement of parts or elements [<span class="citation">MW-Syntax</span>].  The syntax of given information is the expression of that information in an orderly arrangement for the purposes of identifying and obtaining constituent parts.</p><p>
Information can be expressed following well-defined and unambiguous constraints on its syntax.  
Applications acting on information are obligated to use its syntax to identify its components.</p><p>
Semantics is the study of meanings [<span class="citation">MW-Semantics</span>].  The semantics of given information is the meaning of that information for the purpose of interpreting the information's expression for a particular purpose.</p><p>
Information means precisely what an application wants it to mean.  Applications may want the same information to mean different things at different times or in different contexts.</p><p>
The syntax of information is prescriptive while the semantics of information is interpretive.</p><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e43"></a>2.1.&nbsp;
The XML syntax</h3></div></div><div></div></div><p>
An XML document is only a labeled hierarchy of information items, and nothing more.  The hierarchy is a regularly-formed tree of parent information items wholly containing children information items, with only a single highest-level element information item called the "document element".  The two-part labels for the element and attribute information items are comprised of a possibly empty URI string part and a non-empty local name part.</p><p>
The XML Recommendation [<span class="citation">W3C XML</span>] describes the required behavior of an XML processor in terms of how it must read an XML document and the information it must provide to an XML-aware application.</p><p>
A well-formed XML document must follow the syntactic checks and balances described by the formal productions in the XML Recommendation in order to be properly analyzed by an XML processor delivering the contained information to an application.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e55"></a>2.2.&nbsp;
The role of XML namespaces</h3></div></div><div></div></div><p>
The sole role of an XML namespace is the syntactic mechanism by which the URI component of the two-part label for elements and attributes is overlaid on the XML syntax that was originally accommodating only a one-part label for elements and attributes.  Subsequent revisions of the XML Recommendation accommodate namespaces by way of a note warning implementers of XML processors to accept names with colons as simple names even though the use of names with colons is governed by the separate Namespaces in XML Recommendation.</p><p>
All labels for element and attribute information items are seen by a namespace-aware XML processor as having two-parts, the first of which is a possibly-empty URI string and the second of which is a non-empty local name.  All labels for information items are seen by a non-namespace-aware XML processor as having only a single indivisible part.</p><p>
Namespace URI strings have no other defined purpose beyond participation in information item labeling, though users of namespace URI strings may have their own private uses for these strings, such as resource discovery, that are beyond the scope of the formal definition.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e64"></a>2.3.&nbsp;
An XML vocabulary</h3></div></div><div></div></div><p>


No formal definition for "XML vocabulary" has been widely adopted.  A vocabulary is the collection of information item labels that can be used for information expressed in an XML document and processed by an XML-aware application.</p><p>
The author of a vocabulary usually has a preconceived notion of how the information item labels are to be used to distinguish the abstractions behind the concrete syntax that is to be used.  The author's semantics of the vocabulary can be (should be) documented in as unambiguous a fashion as possible.  Usually this method is in the form of prose, despite of the lack of success of human language being unambiguous.  Organizational and editorial tools can arrange and present the prose in a manner suitable for conveying the desired meanings as unambiguously as possible.  Formalisms for expressing semantics such as taxonomies and ontologies can help to express the author's anticipated applicability of the labels, thus documenting the vocabulary and its use when labeling information in an XML document.</p><p>
The author can then express information utilizing the vocabulary of labeled information items in a given hierarchy of an XML document.</p><p>
A vocabulary may describe a set of information item labels where the URI string parts of the labels are all empty, or are all of a single given string, or are all found in a finite set of possible strings.  Vocabulary definitions and descriptions should be explicit in describing how to accommodate information items with foreign URI string parts not defined by the vocabulary.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e75"></a>2.4.&nbsp;
Roles for schema expressions for XML documents</h3></div></div><div></div></div><p>
Schema expressions for XML documents can prescribe particular orderings of the labeled information items allowed in the hierarchical structure.  Some schema expressions can also prescribe the content of particular information items that would otherwise be indivisible in the structure of the hierarchy.</p><p>
The validation of an XML document is the measurement of the document's use of labeled information items against a given set of constraints in a schema expression.</p><p>
Schemas may provide additional supplemental information to processing applications to assist in the application's access to the described information items.  Also, automated tools exist for some schema expressions for the synthesis of program code fragments streamlining the access to information items in XML documents. </p><p>

Schemas, therefore, can supplement the syntax of an XML document with additional syntactic information and commentary about the constituent information items.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="d0e86"></a>2.5.&nbsp;
Semantic XML processing applications</h3></div></div><div></div></div><p>
The sole concrete connection between the author of an XML document and an XML-aware application processing that document is the document's syntax.  An application can successfully decompose an XML document into its labeled constituent parts intended by the author.  With the labeled information item in hand, an application is free to do what it wishes with that information.</p><p>
When that document's syntax makes reference to a supplemental description, such as some kinds of schema expressions, then additional information may be made available from those expressions to a schema-aware application processing that document.  Such information may include content syntax classifications or other supplemental documentary information about the labeled portion of the document.</p><p>
Those who invoke applications with XML documents may choose to reference or include other supplemental information, or even instruct the application to ignore any references to supplemental information embedded in the XML, but these actions are independent of the XML document's author's intention to label the contained data and associate supplemental information with the contents.</p><p>
Once all of the information about the information has been obtained by the application, the application is free to interpret the semantics of the information in any way it wishes, even if that way is not as desired by or envisaged by the author of the information.  This flexibility is not a fault, nor should choosing to interpret the semantics of information differently than intended be considered bad form, it is merely a consequence of the lack of formalism for categorically describing and constraining the semantics of information.</p><p>
Nor should the semantics of information be categorically described and constrained, as there may be many semantic uses of a given syntactic expression of an information item.  Consider the "delivery date" found on an invoice.  The author documents that this is the date at which a given sold item was delivered to the customer.  A financial application interprets this information as the author intended: the delivery date for the sale of a given item.  This might seem inviolate, yet it is easy to see that the semantics of this information would be very different for an inventory tracking application where it is the date an item is removed from inventory for any reason.  Two different applications are interpreting the same information item as two different meanings for their own purposes.</p><p>
Semantic abuse, intentional or unintentional, is a possible consequence of the lack of formalized constraints on semantics.  An improperly implemented application may interpret labeled information incorrectly or, from the author's perspective, improperly, without checks and balances in place for such unintended interpretation.  Such is the result of the label being the only connection between the author of information and the processing of that information.</p></div></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e101"></a>3.&nbsp;
The changing context and life cycle of an XML document</h2></div></div><div></div></div><p>
As shown above, the semantics of information items can be different to different applications because they see the information items in their own context.  Moreover, in the same application context an information item might be different at different times of the document's life cycle (though this could also be seen as different contexts).</p><p>
Shifting the burden of checking the allowed structure and order of labeled information items to external constraint expressions can simplify processing applications.  When these checks are common in different contexts of using different programs, having a single expression ensures users can perform a common set of constraint validations before they process their information.  When these checks are different in different contexts of using different programs, having multiple expressions ensures users can perform different constraint validations on the same data before they process their information.</p><p>
Usually in the life cycle of labeled information the labels do not change, though certainly processes could choose to change the labels on output as different from those labels on input.  Tying certain syntactic constraints inextricably to the labels can successfully provide a common syntactic environment for all processing applications acting on the labeled information.  Nevertheless, attempting to tie semantic constraints to labeled information is futile as processing applications are not bound to semantic constraints, they are only bound to syntactic constraints, and they are free to interpret the labeled information in any way they wish.</p><p>
Note that while certain syntactic constraints on information items may not change in the life cycle of an XML document, other constraints dictated by users may change.  Certain differences are allowed in cardinality constraints (the quantity of information items) and co-occurrence constraints (the presence of information items) when these differences can be superimposed on the information without violating any of the original constraints.  Such superimposed constraints need not redefine the vocabulary nor require a vocabulary's namespace URI identification to be different, they are merely an additional collection of constraints available to the user of an XML document in addition to, and not in conflict with, any other collection of constraints that may be mandated for the information.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e112"></a>4.&nbsp;
W3C Schema expressions</h2></div></div><div></div></div><p>
The World Wide Web Consortium (W3C) XML Schema Working Group is responsible for creating expressions defining the structure, content and semantics of XML documents as part of the W3C XML Activity.  This group has created a type-hierarchy-based approach to expressing the constraints on the information items in XML documents.</p><p>
Each W3C Schema expression describes the structure and content allowed for instances of at most one target namespace.  According to section 2.2 of Part 1 Structures of the W3C Schema Recommendation [<span class="citation">W3C Schema Structures</span>], "the target namespace serves to identify the namespace within which the association between the component and its name exists.  In the case of declarations, this in turn determines the namespace name of, for example, the element information items it may validate".</p><p>
A W3C Schema processor can measure the validity of an XML document, termed "local schema-validity" by checking to see the information items satisfy the constraints embodied in the schema expression.  Additionally, a W3C Schema process can perform an assessment process of measuring local validation as part of an overall package of augmenting the information found in the XML document with schema-related information before delivering the entire package to an application.</p><p>
The sole method of using W3C Schema to describe information items is as a type hierarchy.  All information items are described as being of types that are derived from other system-defined or user-defined types.  This is a natural approach to programmers and data modelers familiar with type hierarchies and object inheritance.  This approach is quite unlike the pattern-grammar approach of XML Document Type Definition (DTD) expressions were elements are described in isolation as being comprised of a pattern of non-terminals defined elsewhere by the user and of terminals defined by the XML Recommendation.</p><p>
It is argued [<span class="citation">JClark-20020604</span>] that while W3C Schema successfully communicates to a program how to process an XML document, it does not successfully communicate to a human reader what constitutes a valid XML document according to the constraints.  Furthermore it would seem in practice that tools are always needed to work with W3C Schema when changing or visualizing the constraints being expressed for XML documents.</p><p>
Not everyone (including this author) buys into the claim that W3C Schema expressions define the semantics of an XML document.  The constraints expressed in a W3C Schema document only apply to the information items labeled in an XML document.  Applications may be assisted by supplemental information illuminating the labeled information accessed through a W3C Schema processor.  Once in hand, however, applications can still act on the labeled information without constraints and interpret the semantics of the information in any way.</p><p>
Many who do claim that W3C Schema expressions somehow define the semantics of an XML document maintain that the namespace URI string assignment in the expression makes the expression the exclusive domain of the semantics represented by the namespace.  These users perpetuate the position that any changing of the constraints of the labeled information mandates use of a different namespace URI because "a different vocabulary is being described".</p><p>
This would not follow if the arguments above regarding semantics being described by applications instead of constraint expressions is accepted.  It is true that information items when collected within a different set of constraints can represent the very same semantics as when they are collected within an original set of constraints.  Should the new constraints not violate any of the old constraints and be a wholly contained subset, XML instances conforming to the new constraints will simultaneously conform to the old constraints.  These subset instances will validly represent the expectations of the author of the constraints for the original vocabulary, thus can safely utilize the same namespace URI string as a label of the applicable vocabulary.</p><p>
W3C Schema embraces this concept that a wholly-contained subset of constraints can be represented by the same namespace URI string as the original set of constraints.  Section 4.2.2 documents schema component modification.  The schema expression containing the <tt class="literal">&lt;redefine&gt;</tt> element may have a namespace URI string but must make reference to schema expressions with either the same namespace URI string or no namespace URI string.  The only kinds of constraint redefinitions available are those whose effects would not allow XML instances to violate the original constraints.  This supports the argument that the namespace URI string does not change when a wholly-contained subset of constraints is expressed.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e142"></a>5.&nbsp;
ISO/IEC 19757 Document Schema Definition Languages (DSDL)</h2></div></div><div></div></div><p>
The Joint Technical Committee of the International Organization for Standardization and the International Electrotechnical Commission has a number of subcommittees, the one of which numbered 34 is responsible for international standardization of document description and processing languages: ISO/IEC JTC 1/SC 34.  An important project in this subcommittee is the development of the Document Schema Definition Languages (DSDL) family of standards [<span class="citation">DSDL</span>] grouped as parts of the International Standard ISO/IEC 19757.</p><p>
Note in the title of this project the word "Languages" is plural.</p><p>
This committee recognizes that it is natural for an XML document type to have no single mechanism for the expression of constraints, but rather a number of different kinds of mechanisms for expressing different kinds of constraints.  Each mechanism has its own features and functionality compared to other expressions of constraints.  The committee created the DSDL family of standards describing the choreography and orchestration of different validation processes that can be applied to a single XML document.  Each DSDL expression language has different validation features from which a user of DSDL picks and chooses those features needed to accomplish the task of validating information outside of application code.</p><p>
In no way is any one expression of constraints obliged to be the definitive expression, defining the only set of rules for organizing an XML document, though creators of vocabularies may choose to have only a single expression they claim does this task.</p><p>
Two important parts of note are ISO/IEC 19757-2 Regular-grammar-based validation RELAX-NG, and ISO/IEC 19757-3 Rule-based validation Schematron. </p><p>
RELAX-NG describes a grammar-based expression of patterned constraints, similar to and more powerful than DTD constraints.  Users can express constraints as the patterns of the presence of information items, describing a markup language as opposed to a type hierarchy.</p><p>
Schematron describes an assertion language approach to constraints, quite different than either a pattern or type hierarchy.  Assertions and rules expressed using an XML document using the Schematron vocabulary are presented to constraint-checking software for the reporting of constraint violations in XML instances to be checked.</p><p>
It is argued [<span class="citation">JClark-20020604</span>] (and I agree) that DSDL expressions are more accessible to people needing to understand the constraints of an XML vocabulary.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e183"></a>6.&nbsp;
Constraining subsets of the Universal Business Language (UBL)</h2></div></div><div></div></div><p>
The Universal Business Language (UBL) [<span class="citation">UBL</span>] project describes the detailed semantics of a large business document vocabulary.  The normative component of the project is a W3C Schema expression of the two-part labels and content constraints for those information items allowed in XML documents.</p><p>
The project has documented the expected interpretation (semantics) of all of the labeled information items, including the contexts in which these labeled information items are used.  Trading partners who agree to use the UBL vocabulary to exchange information each assume that the other party in the transaction agrees with them upon the documented semantics for the use of the labels.</p><p>
This implicit agreement on semantics is critical to the successful deployment of UBL between trading partners.  Solely choosing to use the UBL W3C Schema constraint expressions for checking the labels on the information items carries no weight with the applications interpreting the information.  The programmers of the applications interpreting the labeled information constrained by the W3C Schema expressions must also follow the documented semantics so the trading partners can realize their expected behaviors with the information.</p><p>
The primary documentation tool used to describe the semantics of the information marked by their respective labels is a spreadsheet.  This spreadsheet happened to also be the basis of the collaborative interchange between committee members in evolving the descriptions of the semantics.  Trading partners and application developers use this spreadsheet to understand the intentions of the UBL committee in the use of the labels for the information items in XML documents.</p><p>
While the normative W3C Schema expression of the information item labels satisfies instances possibly containing components of the entire vocabulary, analysis is underway to determine if there exists any number of strict vocabulary subsets that will be useful between UBL trading partners.  It makes sense to only consider strict subsets of the vocabulary, where valid instances of the subset are always valid instances of the whole.  Any expression of constraints allowing instances that are not valid instances of the whole should be considered extensions to UBL.</p><p>
Many appeals of a strict subset are benefits realized by smaller users who feel they will never need to take advantage of the whole: easier training when not needing to teach or learn the whole, easier utilization when not being distracted by the whole, and smaller (thereby usually cheaper) software when not needing to accommodate the whole.   Such beneficial claims are difficult to refute when their subset is a bona fide subset of the whole and their instances are not in conflict with applications that process the whole.</p><p>
A commonly-held distaste of a strict subset is based on the premise that long-term support of a subset by both industry and users who will never embrace the whole will result in a widespread environment where expectations of users of the whole are dashed when their instances of the whole are rejected.  This can be mitigated by managing the expectations of users of the whole, though doing so does not often manage their dissatisfaction of not being able to use the whole.  "You're dumbing down the environment" is a common refrain.</p><p>
Constraining a subset of the whole can be accomplished by any number of schema expressions, each with their own features that may or may not meet the requirements of the subset constraints.</p><p>
Two examples exist where expressing a strict subset of UBL should use ISO/IEC 19757-2 DSDL.  Both a RELAX-NG expression of co-occurrence constraints can specify a pattern grammar and a Schematron expression of content constraints and co-occurrence constraints can have the power to relate information items in ways not supported by W3C Schema.  If the subset semantics requires a subset expression where the constraints of the labels and content require this expressive power, then an instance can be validated by both the whole schema (for normative correctness) and by the subset constraints (for contextual use).  However, not all tools support the choreography of validation processes described by ISO/IEC 19757-10 Validation Framework, thus preventing these tools from providing on-the-fly validation or instance creation constraints.</p><p>
When a subset of UBL constraints can be sufficiently expressed by the <tt class="literal">&lt;redefine&gt;</tt> feature of W3C Schema, not only is the namespace URI string unchanged and the subset guaranteed to be a strict subset (as obliged and constrained, respectively, by the W3C Schema Recommendation), but a tool can make reference to the single subset schema expression (which in turn references all other required expressions) for ease-of-use.</p></div><div class="section" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e220"></a>7.&nbsp;
Conclusion</h2></div></div><div></div></div><p>
This discussion paper leads to the conclusion that the syntax of labeling information is sufficiently separated from the semantics of that information to allow any expression of constraints to be associated with a namespace URI, provided instances conforming to those constraints conform to the original document model.</p></div><div class="bibliography"><div class="titlepage"><div><div><h2 class="title"><a name="d0e225"></a>
Bibliography</h2></div></div><div></div></div><div class="bibliodiv"><h3 class="title">
Recommendations</h3><div class="biblioentry"><p>[<span class="abbrev">W3C Schema Structures</span>] <span class="publisher"><span class="publishername">World Wide Web Consortium (W3C). </span></span><span class="title"><i>XML Schema Part 1: Structures</i>. </span></p></div><div class="biblioentry"><p>[<span class="abbrev">W3C XML</span>] <span class="publisher"><span class="publishername">World Wide Web Consortium (W3C). </span></span><span class="title"><i>Extensible Markup Language (XML) 1.1</i>. </span></p></div></div><div class="bibliodiv"><h3 class="title">
Definitions</h3><div class="biblioentry"><p>[<span class="abbrev">MW-Semantics</span>] <span class="publisher"><span class="publishername">Merriam-Webster Online. </span></span><span class="title"><i>semantics</i>. </span></p></div><div class="biblioentry"><p>[<span class="abbrev">MW-Syntax</span>] <span class="publisher"><span class="publishername">Merriam-Webster Online. </span></span><span class="title"><i>syntax (def. 2)</i>. </span></p></div></div><div class="bibliodiv"><h3 class="title">
Web site pages</h3><div class="bibliomixed"><p class="bibliomixed">[<span class="abbrev">DSDL</span>] 


http://dsdl.org</p></div><div class="bibliomixed"><p class="bibliomixed">[<span class="abbrev">JClark-20020604</span>] 

http://www.imc.org/ietf-xml-use/mail-archive/msg00217.html</p></div><div class="bibliomixed"><p class="bibliomixed">[<span class="abbrev">UBL</span>] 

http://www.oasis-open.org/committees/ubl
</p></div></div></div></div></body></html>